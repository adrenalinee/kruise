agent:
  enabled: true ## default agent 사용
  podName: jenkins-agent-default
  nodeUsageMode: NORMAL
#  command: jenkins-agent
  idleMinutes: 60 ## job 실행용 pod 대기 시간(대기시간중에 잡 실행가능)
  containerCap: 10 ## 한클러스터에서 동시에 실행가능한 최대 job 갯수
  resources:
    limits:
      cpu:
      memory:
controller:
  installPlugins:
    - workflow-aggregator
    - ldap
    - job-dsl
    - xml-job-to-job-dsl
    - github
    - kubernetes
    - git
    - configuration-as-code
    - pipeline-stage-view
    - pipeline-graph-view
    - remote-file
    - http_request
    - matrix-auth
    - nested-view
    - pipeline-utility-steps
    - github-oauth
    - ws-cleanup
    - kubernetes-cli
    - authorize-project
    - build-user-vars-plugin
#  initializeOnce: true

  JCasC:
    configScripts:
      welcome-message: |-
        jenkins:
          systemMessage: welcome to kruise jenkins
      authorization: |-
        security:
          scriptApproval:
            approvedSignatures:
            - method groovy.lang.GroovyObject getProperty java.lang.String
            - method groovy.lang.GroovyObject invokeMethod java.lang.String java.lang.Object
            - method hudson.model.AbstractProject disable
            - method hudson.model.Item delete
            - method hudson.model.Item getName
            - method hudson.model.ItemGroup getItems
            - method hudson.model.ViewGroup deleteView hudson.model.View
            - method hudson.model.ViewGroup getView java.lang.String
            - method jenkins.model.ParameterizedJobMixIn$ParameterizedJob setDisabled boolean
            - staticMethod jenkins.model.Jenkins getInstance
          queueItemAuthenticator:
            authenticators:
            - global:
                strategy: triggeringUsersAuthorizationStrategy
        jenkins:
          authorizationStrategy:
            globalMatrix:
              permissions:
              - "USER:Job/Read:anonymous"
              - "USER:Overall/Read:anonymous"
              - "USER:View/Read:anonymous"
              - "GROUP:Overall/Administer:authenticated"
      seed-jobs: |-
        jobs:
          - script: >
              pipelineJob("kruise.init") {
                description("kruise 에서 사용할 seed job 을 생성합니다.")
                parameters {
                  credentialsParam("kruiseRepositoryCredential") {
                    type("com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl")
                    description("빌드 스크립트를 다운받을때 사용할 인증 token 을 지정하세요. 모든 job 이 실행될때 인증을 시도 합니다. ex: github -> settings -> developer settings -> personal access tokens 발급.")
                  }
                  credentialsParam("containerRegistryCredential") {
                    type("com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl")
                    description("containerRegistry 인증용 계정을 지정하세요.")
                  }
                  credentialsParam("argocdCredential") {
                    type("org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl")
                    description("argocd 관리자 계정(kruise-admin)의 인증 토큰 을 지정하세요. ex: kruise 에서 설치한 argocd 에 'admin' 계정으로 로그인(초기 비밀번호는 secret 에서 확인)  후에 'kruise-admin' 계정의 token 발급.")
                  }
                  stringParam {
                    name("kruiseRepositoryUrl")
                    defaultValue("https://github.com/adrenalinee/kruise.git")
                    description("빌드 스크립트를 가져올 git 주소입니다.")
                    trim(true)
                  }
                  stringParam {
                    name("kruiseBranch")
                    defaultValue("main")
                    description("빌드 스크립트를 가져올 branch 입니다.")
                    trim(true)
                  }
                }
                definition {
                  cps {
                    sandbox(true)
                    script(
              """
              final String kruiseRepositoryUrl = params.kruiseRepositoryUrl;
              final String kruiseBranch = params.kruiseBranch;
              podTemplate(
                inheritFrom: 'jenkins-agent-default',
              ) {
                node(POD_LABEL) {
                  stage("Checkout kruise") {
                    git(url: kruiseRepositoryUrl, branch: kruiseBranch, credentialsId: kruiseRepositoryCredential)
                  }
                  stage('Run jobDsl') {
                    jobDsl(sandbox: true, targets: 'initJobs/**_JobDsl.groovy')
                  }
                }
              }"""
                    )
                  }
                }
              }
